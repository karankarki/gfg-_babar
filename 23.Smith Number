class Solution {
    static int smithNum(int n) {
        int sum = 0;
        int m = n;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }

        HashMap<Integer, Integer> map = new HashMap<>();
        int i = 2;
        while (m > 1) {
            if (m % i == 0) {
                if (isprime(i)) {
                    int mul = 1;
                    while (m % i == 0) {
                        map.put(i, map.getOrDefault(i, 0) + 1);
                        mul *= i;
                        m /= i;
                    }
                } else {
                    i++;
                }
            } else {
                i++;
            }
        }

        int temp = 0;
        for (int j : map.keySet()) {
            temp += map.get(j) * j;
        }

        return temp == sum ? 1 : 0;
    }

    public static boolean isprime(int n) {
        if (n <= 1) {
            return false;
        }

        for (int i = 2; i * i <= n; i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}

